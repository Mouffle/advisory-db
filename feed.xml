<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>RustSec Advisories</title><id>https://rustsec.org/feed.xml</id><updated>2024-08-27T12:00:00+00:00</updated><author><name>RustSec</name></author><icon>https://rustsec.org/favicon.ico</icon><link href="https://rustsec.org/feed.xml" rel="self" type="application/atom+xml"/><link href="https://rustsec.org/" rel="alternate" type="text/html"/><subtitle xml:lang="en">Security advisories filed against Rust crates</subtitle><entry><title>RUSTSEC-2024-0366: Vulnerability in cosmwasm-vm</title><id>https://rustsec.org/advisories/RUSTSEC-2024-0366.html</id><updated>2024-08-27T12:00:00+00:00</updated><category term="denial-of-service"/><link href="https://rustsec.org/advisories/RUSTSEC-2024-0366.html" rel="alternate" type="text/html" title="RUSTSEC-2024-0366: Vulnerability in cosmwasm-vm"/><published>2024-08-27T12:00:00+00:00</published><summary xml:lang="en">CWA-2023-004: Excessive number of function parameters in compiled Wasm</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/cosmwasm-vm/RUSTSEC-2024-0366.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/cosmwasm-vm/RUSTSEC-2024-0366.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2024-0366&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2024-0366
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;CWA-2023-004: Excessive number of function parameters in compiled Wasm&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-08-27&quot;&gt;
          August 27, 2024
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-08-27&quot;&gt;
          August 27, 2024
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/cosmwasm-vm.html&quot;&gt;cosmwasm-vm&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/cosmwasm-vm&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/denial-of-service.html&quot;&gt;denial-of-service&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/resource-consumption.html&quot;&gt;#resource-consumption&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/crash.html&quot;&gt;#crash&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/deadlock.html&quot;&gt;#deadlock&lt;/a&gt;
        
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md&quot;&gt;
              https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md
            &lt;/a&gt;
          &lt;/li&gt;
        
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=1.2.8, &amp;lt;1.3.0&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=1.3.4, &amp;lt;1.4.0&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=1.4.2, &amp;lt;1.5.0&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=1.5.1&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;A specifically crafted Wasm file can cause the VM to consume excessive amounts of memory when compiling a contract.
This can lead to high memory usage, slowdowns, potentially a crash and can poison a lock in the VM,
preventing any further interaction with contracts.&lt;/p&gt;
&lt;p&gt;For more information, see &lt;a href=&quot;https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md&quot;&gt;CWA-2023-004&lt;/a&gt;.&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2024-0365: Vulnerability in diesel</title><id>https://rustsec.org/advisories/RUSTSEC-2024-0365.html</id><updated>2024-08-23T12:00:00+00:00</updated><category term="format-injection"/><link href="https://rustsec.org/advisories/RUSTSEC-2024-0365.html" rel="alternate" type="text/html" title="RUSTSEC-2024-0365: Vulnerability in diesel"/><published>2024-08-23T12:00:00+00:00</published><summary xml:lang="en">Binary Protocol Misinterpretation caused by Truncating or Overflowing Casts</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/diesel/RUSTSEC-2024-0365.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/diesel/RUSTSEC-2024-0365.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2024-0365&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2024-0365
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Binary Protocol Misinterpretation caused by Truncating or Overflowing Casts&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-08-23&quot;&gt;
          August 23, 2024
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-08-23&quot;&gt;
          August 23, 2024
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/diesel.html&quot;&gt;diesel&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/diesel&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/format-injection.html&quot;&gt;format-injection&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/sql.html&quot;&gt;#sql&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/injection.html&quot;&gt;#injection&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/overflow.html&quot;&gt;#overflow&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/truncation.html&quot;&gt;#truncation&lt;/a&gt;
        
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/diesel-rs/diesel/pull/4170&quot;&gt;
              https://github.com/diesel-rs/diesel/pull/4170
            &lt;/a&gt;
          &lt;/li&gt;
        
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=2.2.3&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;The following presentation at this year&apos;s DEF CON was brought to our attention on the Diesel Gitter Channel:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQL Injection isn&apos;t Dead: Smuggling Queries at the Protocol Level&lt;br /&gt;
&lt;a href=&quot;http://web.archive.org/web/20240812130923/https://media.defcon.org/DEF%20CON%2032/DEF%20CON%2032%20presentations/DEF%20CON%2032%20-%20Paul%20Gerste%20-%20SQL%20Injection%20Isn&amp;#x27;t%20Dead%20Smuggling%20Queries%20at%20the%20Protocol%20Level.pdf&quot;&gt;http://web.archive.org/web/20240812130923/https://media.defcon.org/DEF%20CON%2032/DEF%20CON%2032%20presentations/DEF%20CON%2032%20-%20Paul%20Gerste%20-%20SQL%20Injection%20Isn&apos;t%20Dead%20Smuggling%20Queries%20at%20the%20Protocol%20Level.pdf&lt;/a&gt;&lt;br /&gt;
(Archive link for posterity.)
Essentially, encoding a value larger than 4GiB can cause the length prefix in the protocol to overflow,
causing the server to interpret the rest of the string as binary protocol commands or other data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It appears Diesel &lt;em&gt;does&lt;/em&gt; perform truncating casts in a way that could be problematic,
for example: &lt;a href=&quot;https://github.com/diesel-rs/diesel/blob/ae82c4a5a133db65612b7436356f549bfecda1c7/diesel/src/pg/connection/stmt/mod.rs#L36&quot;&gt;https://github.com/diesel-rs/diesel/blob/ae82c4a5a133db65612b7436356f549bfecda1c7/diesel/src/pg/connection/stmt/mod.rs#L36&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This code has existed essentially since the beginning,
so it is reasonable to assume that all published versions &lt;code&gt;&amp;lt;= 2.2.2&lt;/code&gt; are affected.&lt;/p&gt;
&lt;h2&gt;Mitigation&lt;/h2&gt;
&lt;p&gt;The prefered migration to the outlined problem is to update to a Diesel version newer than 2.2.2, which includes
fixes for the problem.&lt;/p&gt;
&lt;p&gt;As always, you should make sure your application is validating untrustworthy user input.
Reject any input over 4 GiB, or any input that could &lt;em&gt;encode&lt;/em&gt; to a string longer than 4 GiB.
Dynamically built queries are also potentially problematic if it pushes the message size over this 4 GiB bound.&lt;/p&gt;
&lt;p&gt;For web application backends, consider adding some middleware that limits the size of request bodies by default.&lt;/p&gt;
&lt;h2&gt;Resolution&lt;/h2&gt;
&lt;p&gt;Diesel now uses &lt;code&gt;#[deny]&lt;/code&gt; directives for the following Clippy lints:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://rust-lang.github.io/rust-clippy/master/#/cast_possible_truncation&quot;&gt;&lt;code&gt;cast_possible_truncation&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rust-lang.github.io/rust-clippy/master/#/cast_possible_wrap&quot;&gt;&lt;code&gt;cast_possible_wrap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rust-lang.github.io/rust-clippy/master/#/cast_sign_loss&quot;&gt;&lt;code&gt;cast_sign_loss&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;to prevent casts that will lead to precision loss or other trunctations. Additionally we performed an
audit of the relevant code.&lt;/p&gt;
&lt;p&gt;A fix is included in the &lt;code&gt;2.2.3&lt;/code&gt; release.&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2024-0364: Vulnerability in gitoxide-core</title><id>https://rustsec.org/advisories/RUSTSEC-2024-0364.html</id><updated>2024-08-23T12:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2024-0364.html" rel="alternate" type="text/html" title="RUSTSEC-2024-0364: Vulnerability in gitoxide-core"/><published>2024-08-23T12:00:00+00:00</published><summary xml:lang="en">gitoxide-core does not neutralize special characters for terminals</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/gitoxide-core/RUSTSEC-2024-0364.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/gitoxide-core/RUSTSEC-2024-0364.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2024-0364&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2024-0364
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;gitoxide-core does not neutralize special characters for terminals&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-08-22&quot;&gt;
          August 22, 2024
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-08-23&quot;&gt;
          August 23, 2024
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/gitoxide-core.html&quot;&gt;gitoxide-core&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/gitoxide-core&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/terminal.html&quot;&gt;#terminal&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/control-characters.html&quot;&gt;#control-characters&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/escape-sequences.html&quot;&gt;#escape-sequences&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;aliases&quot;&gt;Aliases&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-43785&quot;&gt;CVE-2024-43785&lt;/a&gt;
            
          &lt;/li&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://github.com/advisories/GHSA-88g2-r9rw-g55h&quot;&gt;GHSA-88g2-r9rw-g55h&lt;/a&gt;
            
          &lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h&quot;&gt;
              https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h
            &lt;/a&gt;
          &lt;/li&gt;
        
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/advisories/GHSA-88g2-r9rw-g55h&quot;&gt;
              https://github.com/advisories/GHSA-88g2-r9rw-g55h
            &lt;/a&gt;
          &lt;/li&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2024-43785&quot;&gt;
              https://nvd.nist.gov/vuln/detail/CVE-2024-43785
            &lt;/a&gt;
          &lt;/li&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/Byron/gitoxide/issues/1534&quot;&gt;
              https://github.com/Byron/gitoxide/issues/1534
            &lt;/a&gt;
          &lt;/li&gt;
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;cvss_score&quot;&gt;CVSS Score&lt;/dt&gt;
      &lt;dd&gt;2.5 &lt;span class=&quot;tag low&quot;&gt;
        LOW
      &lt;/span&gt;&lt;/dd&gt;

      &lt;dt id=&quot;cvss_details&quot;&gt;CVSS Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;dl&gt;
          
          &lt;dt&gt;Attack vector&lt;/dt&gt;&lt;dd&gt;Local&lt;/dd&gt;
          

          
          &lt;dt&gt;Attack complexity&lt;/dt&gt;&lt;dd&gt;High&lt;/d&gt;
          

          
          &lt;dt&gt;Privileges required&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          

          
          &lt;dt&gt;User interaction&lt;/dt&gt;&lt;dd&gt;Required&lt;/dd&gt;
          

          
          &lt;dt&gt;Scope&lt;/dt&gt;&lt;dd&gt;Unchanged&lt;/dd&gt;
          

          
          &lt;dt&gt;Confidentiality&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          

          
          &lt;dt&gt;Integrity&lt;/dt&gt;&lt;dd&gt;Low&lt;/dd&gt;
          

          
          &lt;dt&gt;Availability&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          
        &lt;/dl&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;cvss&quot;&gt;CVSS Vector&lt;/dt&gt;
      &lt;dd&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=CVSS:3.1/AV:L/AC:H/PR:N/UI:R/S:U/C:N/I:L/A:N&quot;&gt;CVSS:3.1/AV:L/AC:H/PR:N/UI:R/S:U/C:N/I:L/A:N&lt;/a&gt;&lt;/dd&gt;

      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        no patched versions
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;gix&lt;/code&gt; and &lt;code&gt;ein&lt;/code&gt; commands write pathnames and other metadata literally to terminals, even if they contain characters terminals treat specially, including ANSI escape sequences. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.&lt;/p&gt;
&lt;h3&gt;Details&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;gitoxide-core&lt;/code&gt;, which provides most underlying functionality of the &lt;code&gt;gix&lt;/code&gt; and &lt;code&gt;ein&lt;/code&gt; commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository&apos;s paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails.&lt;/p&gt;
&lt;p&gt;ANSI escape sequences are of particular concern because, when printed to a terminal, they can change colors, including to render subsequent text unreadable; reposition the cursor to write text in a different location, including where text has already been written; clear the terminal; set the terminal title-bar text to arbitrary values; render the terminal temporarily unusable; and other such operations.&lt;/p&gt;
&lt;p&gt;The effect is mostly an annoyance. But the author of a malicious repository who can predict how information from the repository may be accessed can cause files in the repository to be concealed or otherwise misrepresented, as well as rewrite all or part of error messages, or mimic error messages convincingly by repositioning the cursor and writing colored text.&lt;/p&gt;
&lt;h3&gt;PoC&lt;/h3&gt;
&lt;p&gt;On a Unix-like system in a POSIX-compatible shell, run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git init misleading-path
cd misleading-path
touch &amp;quot;$(printf &apos;\033]0;Boo!\007\033[2K\r\033[91mError: Repository is corrupted. Run \033[96mEVIL_COMMAND\033[91m to attempt recovery.\033[0m&apos;)&amp;quot;
git add .
git commit -m &apos;Initial commit&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the repository—or, if desired, in a clone of it, to show that this is exploitable by getting a user to clone an untrusted repository—run this command, which outputs entries in a three-column form showing type, hash, and filename:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gix tree entries
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although the output is of that form, it does not appear to be. Instead, the output in a terminal looks like this, colorized to appear to be an error message, with &lt;code&gt;EVIL_COMMAND&lt;/code&gt; in another color, and with no other text:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Error: Repository is corrupted. Run EVIL_COMMAND to attempt recovery.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In some terminals, a beep or other sound will be made. In most terminals, the title bar text will be changed to &lt;code&gt;Boo!&lt;/code&gt;, though in some shells this may be immediately undone when printing the prompt. These elements are included to showcase the abilities of ANSI escape sequences, but they are not usually themselves threats.&lt;/p&gt;
&lt;p&gt;To see what is actually produced, &lt;code&gt;gix tree entries&lt;/code&gt; can be piped to a command that displays special characters symbolically, such as &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;cat -v&lt;/code&gt; if available.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;BLOB e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 ESC]0;Boo!^GESC[2K^MESC[91mError: Repository is corrupted. Run ESC[96mEVIL_COMMANDESC[91m to attempt recovery.ESC[0m
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That shows the effect on &lt;code&gt;gix tree entries&lt;/code&gt;, but various other commands are also affected, and the escape sequences and other special characters can also appear in non-path metadata, such as in the &lt;code&gt;user.name&lt;/code&gt; used to create a commit.&lt;/p&gt;
&lt;h3&gt;Impact&lt;/h3&gt;
&lt;p&gt;For users who do not clone or operate in clones of untrusted repositories, there is no impact.&lt;/p&gt;
&lt;p&gt;Windows is much less affected than Unix-like systems due to limitations on what characters can appear in filenames, and because traditionally Windows terminals do not support as many ANSI escape sequences.&lt;/p&gt;
&lt;p&gt;Because different &lt;code&gt;gix&lt;/code&gt; and &lt;code&gt;ein&lt;/code&gt; commands display different data in different formats, the author of a malicious repository must guess how it will be used, which complicates crafting truly convincing output, though it may be possible to craft a repository where &lt;code&gt;gix clone&lt;/code&gt; fails to clone it but produces a misleading message.&lt;/p&gt;
&lt;p&gt;Although this is mainly exploitable on systems &lt;em&gt;other&lt;/em&gt; than Windows, in the ability to produce misleading output this superficially resembles &lt;a href=&quot;https://github.com/advisories/GHSA-49jc-r788-3fc9&quot;&gt;CVE-2024-35197&lt;/a&gt;. But this is much more limited, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The misleading output can only be made to go where the application is already sending output. Redirection is not defeated, and devices to access cannot be chosen by the attacker.&lt;/li&gt;
&lt;li&gt;The misleading output can only be take place &lt;em&gt;when&lt;/em&gt; the application is already producing output. This limitation complicates the production of believable messages.&lt;/li&gt;
&lt;li&gt;Only terminals are affected. Even if a standard stream is redirected to another file or device, these special characters would not have a special effect, unless echoed later without sanitization.&lt;/li&gt;
&lt;li&gt;Reading and blocking cannot be performed.&lt;/li&gt;
&lt;li&gt;Applications other than the gitoxide &lt;code&gt;gix&lt;/code&gt; and &lt;code&gt;ein&lt;/code&gt; executables are unaffected. The exception is if another application uses &lt;code&gt;gitoxide-core&lt;/code&gt;. But this is explicitly discouraged in the &lt;code&gt;gitoxide-core&lt;/code&gt; documentation and is believed to be rare.&lt;/li&gt;
&lt;/ul&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2024-0363: Vulnerability in sqlx</title><id>https://rustsec.org/advisories/RUSTSEC-2024-0363.html</id><updated>2024-08-24T12:00:00+00:00</updated><category term="format-injection"/><link href="https://rustsec.org/advisories/RUSTSEC-2024-0363.html" rel="alternate" type="text/html" title="RUSTSEC-2024-0363: Vulnerability in sqlx"/><published>2024-08-16T12:00:00+00:00</published><summary xml:lang="en">Binary Protocol Misinterpretation caused by Truncating or Overflowing Casts</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/sqlx/RUSTSEC-2024-0363.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/sqlx/RUSTSEC-2024-0363.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2024-0363&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2024-0363
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Binary Protocol Misinterpretation caused by Truncating or Overflowing Casts&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-08-15&quot;&gt;
          August 15, 2024
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-08-16&quot;&gt;
          August 16, 2024
        &lt;/time&gt;
        
        &lt;time datetime=&quot;2024-08-24&quot;&gt;
          (last modified: August 24, 2024)
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/sqlx.html&quot;&gt;sqlx&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/sqlx&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/format-injection.html&quot;&gt;format-injection&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/sql.html&quot;&gt;#sql&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/injection.html&quot;&gt;#injection&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/overflow.html&quot;&gt;#overflow&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/truncation.html&quot;&gt;#truncation&lt;/a&gt;
        
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/launchbadge/sqlx/issues/3440&quot;&gt;
              https://github.com/launchbadge/sqlx/issues/3440
            &lt;/a&gt;
          &lt;/li&gt;
        
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.8.1&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;The following presentation at this year&apos;s DEF CON was brought to our attention on the SQLx Discord:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQL Injection isn&apos;t Dead: Smuggling Queries at the Protocol Level&lt;br /&gt;
&lt;a href=&quot;http://web.archive.org/web/20240812130923/https://media.defcon.org/DEF%20CON%2032/DEF%20CON%2032%20presentations/DEF%20CON%2032%20-%20Paul%20Gerste%20-%20SQL%20Injection%20Isn&amp;#x27;t%20Dead%20Smuggling%20Queries%20at%20the%20Protocol%20Level.pdf&quot;&gt;http://web.archive.org/web/20240812130923/https://media.defcon.org/DEF%20CON%2032/DEF%20CON%2032%20presentations/DEF%20CON%2032%20-%20Paul%20Gerste%20-%20SQL%20Injection%20Isn&apos;t%20Dead%20Smuggling%20Queries%20at%20the%20Protocol%20Level.pdf&lt;/a&gt;&lt;br /&gt;
(Archive link for posterity.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Essentially, encoding a value larger than 4GiB can cause the length prefix in the protocol to overflow,
causing the server to interpret the rest of the string as binary protocol commands or other data.&lt;/p&gt;
&lt;p&gt;It appears SQLx &lt;em&gt;does&lt;/em&gt; perform truncating casts in a way that could be problematic,
for example: &lt;a href=&quot;https://github.com/launchbadge/sqlx/blob/6f2905695b9606b5f51b40ce10af63ac9e696bb8/sqlx-postgres/src/arguments.rs#L163&quot;&gt;https://github.com/launchbadge/sqlx/blob/6f2905695b9606b5f51b40ce10af63ac9e696bb8/sqlx-postgres/src/arguments.rs#L163&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This code has existed essentially since the beginning,
so it is reasonable to assume that all published versions &lt;code&gt;&amp;lt;= 0.8.0&lt;/code&gt; are affected.&lt;/p&gt;
&lt;h2&gt;Mitigation&lt;/h2&gt;
&lt;p&gt;As always, you should make sure your application is validating untrustworthy user input.
Reject any input over 4 GiB, or any input that could &lt;em&gt;encode&lt;/em&gt; to a string longer than 4 GiB.
Dynamically built queries are also potentially problematic if it pushes the message size over this 4 GiB bound.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.rs/sqlx/latest/sqlx/trait.Encode.html#method.size_hint&quot;&gt;&lt;code&gt;Encode::size_hint()&lt;/code&gt;&lt;/a&gt;
can be used for sanity checks, but do not assume that the size returned is accurate.
For example, the &lt;code&gt;Json&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;Text&amp;lt;T&amp;gt;&lt;/code&gt; adapters have no reasonable way to predict or estimate the final encoded size,
so they just return &lt;code&gt;size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;For web application backends, consider adding some middleware that limits the size of request bodies by default.&lt;/p&gt;
&lt;h2&gt;Resolution&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sqlx 0.8.1&lt;/code&gt; has been released with the fix: &lt;a href=&quot;https://github.com/launchbadge/sqlx/blob/main/CHANGELOG.md#081---2024-08-23&quot;&gt;https://github.com/launchbadge/sqlx/blob/main/CHANGELOG.md#081---2024-08-23&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Postgres users are advised to upgrade ASAP as a possible exploit has been demonstrated:
&lt;a href=&quot;https://github.com/launchbadge/sqlx/issues/3440#issuecomment-2307956901&quot;&gt;https://github.com/launchbadge/sqlx/issues/3440#issuecomment-2307956901&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MySQL and SQLite do not &lt;em&gt;appear&lt;/em&gt; to be exploitable, but upgrading is recommended nonetheless.&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2024-0362: Vulnerability in alloy-json-abi</title><id>https://rustsec.org/advisories/RUSTSEC-2024-0362.html</id><updated>2024-08-15T12:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2024-0362.html" rel="alternate" type="text/html" title="RUSTSEC-2024-0362: Vulnerability in alloy-json-abi"/><published>2024-08-15T12:00:00+00:00</published><summary xml:lang="en">Stack overflow when parsing specially crafted JSON ABI strings</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/alloy-json-abi/RUSTSEC-2024-0362.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/alloy-json-abi/RUSTSEC-2024-0362.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2024-0362&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2024-0362
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Stack overflow when parsing specially crafted JSON ABI strings&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-07-30&quot;&gt;
          July 30, 2024
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-08-15&quot;&gt;
          August 15, 2024
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/alloy-json-abi.html&quot;&gt;alloy-json-abi&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/alloy-json-abi&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/stack-overflow.html&quot;&gt;#stack-overflow&lt;/a&gt;
        
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/alloy-rs/core/issues/702&quot;&gt;
              https://github.com/alloy-rs/core/issues/702
            &lt;/a&gt;
          &lt;/li&gt;
        
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.7.7&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;Affected versions of the &lt;code&gt;alloy-json-abi&lt;/code&gt; crate did not properly handle parsing of malformatted JSON ABI strings. The &lt;code&gt;JsonAbi::parse&lt;/code&gt; method can be tricked into a stack overflow when processing specially crafted input.&lt;/p&gt;
&lt;p&gt;This stack overflow can lead to a crash of the application using this crate, potentially causing a denial of service.&lt;/p&gt;
&lt;p&gt;The flaw was corrected in commit 4790c47.&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2024-0361: Vulnerability in cosmwasm-vm</title><id>https://rustsec.org/advisories/RUSTSEC-2024-0361.html</id><updated>2024-08-08T12:00:00+00:00</updated><category term="denial-of-service"/><link href="https://rustsec.org/advisories/RUSTSEC-2024-0361.html" rel="alternate" type="text/html" title="RUSTSEC-2024-0361: Vulnerability in cosmwasm-vm"/><published>2024-08-08T12:00:00+00:00</published><summary xml:lang="en">CWA-2024-004: Gas mispricing in cosmwasm-vm</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/cosmwasm-vm/RUSTSEC-2024-0361.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/cosmwasm-vm/RUSTSEC-2024-0361.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2024-0361&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2024-0361
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;CWA-2024-004: Gas mispricing in cosmwasm-vm&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-08-08&quot;&gt;
          August  8, 2024
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-08-08&quot;&gt;
          August  8, 2024
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/cosmwasm-vm.html&quot;&gt;cosmwasm-vm&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/cosmwasm-vm&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/denial-of-service.html&quot;&gt;denial-of-service&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/resource-consumption.html&quot;&gt;#resource-consumption&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;aliases&quot;&gt;Aliases&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://github.com/advisories/GHSA-rg2q-2jh9-447q&quot;&gt;GHSA-rg2q-2jh9-447q&lt;/a&gt;
            
          &lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md&quot;&gt;
              https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md
            &lt;/a&gt;
          &lt;/li&gt;
        
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=1.5.7, &amp;lt;2.0.0&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=2.0.6, &amp;lt;2.1.0&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=2.1.3&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;Some Wasm operations take significantly more gas than our benchmarks indicated. This can lead to missing the gas target we defined by a factor of ~10x. This means a malicious contract could take 10 times as much time to execute as expected, which can be used to temporarily DoS a chain.&lt;/p&gt;
&lt;p&gt;For more information, see &lt;a href=&quot;https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md&quot;&gt;CWA-2024-004&lt;/a&gt;.&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2024-0360: Unsoundness in xmp_toolkit</title><id>https://rustsec.org/advisories/RUSTSEC-2024-0360.html</id><updated>2024-07-26T12:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2024-0360.html" rel="alternate" type="text/html" title="RUSTSEC-2024-0360: Unsoundness in xmp_toolkit"/><published>2024-07-26T12:00:00+00:00</published><summary xml:lang="en">`XmpFile::close` can trigger UB</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/xmp_toolkit/RUSTSEC-2024-0360.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/xmp_toolkit/RUSTSEC-2024-0360.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2024-0360&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2024-0360
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;&lt;code&gt;XmpFile::close&lt;/code&gt; can trigger UB&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-07-26&quot;&gt;
          July 26, 2024
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-07-26&quot;&gt;
          July 26, 2024
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/xmp_toolkit.html&quot;&gt;xmp_toolkit&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/xmp_toolkit&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unsound
        
      &lt;/dd&gt;

      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/xmp.html&quot;&gt;#xmp&lt;/a&gt;
        
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/adobe/xmp-toolkit-rs/issues/233&quot;&gt;
              https://github.com/adobe/xmp-toolkit-rs/issues/233
            &lt;/a&gt;
          &lt;/li&gt;
        
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=1.9.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      

      
      
    &lt;/dl&gt;

    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;xmp_toolkit::XmpFile::close&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;1.9.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    

    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;Affected versions of the crate failed to catch C++ exceptions raised within the &lt;code&gt;XmpFile::close&lt;/code&gt; function. If such an exception occured, it would trigger undefined behavior, typically a process abort.&lt;/p&gt;
&lt;p&gt;This is best demonstrated in &lt;a href=&quot;https://github.com/adobe/xmp-toolkit-rs/issues/230&quot;&gt;issue #230&lt;/a&gt;, where a race condition causes the &lt;code&gt;close&lt;/code&gt; call to fail due to file I/O errors.&lt;/p&gt;
&lt;p&gt;This was fixed in &lt;a href=&quot;https://github.com/adobe/xmp-toolkit-rs/pull/232&quot;&gt;PR #232&lt;/a&gt; (released as crate version 1.9.0), which now safely handles the exception.&lt;/p&gt;
&lt;p&gt;For backward compatibility, the existing API ignores the error. A new API &lt;code&gt;XmpFile::try_close&lt;/code&gt; was added to allow callers to receive and process the error result.&lt;/p&gt;
&lt;p&gt;Users of all prior versions of &lt;code&gt;xmp_toolkit&lt;/code&gt; are encouraged to update to version 1.9.0 to avoid undefined behavior.&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2024-0359: Unsoundness in gix-attributes</title><id>https://rustsec.org/advisories/RUSTSEC-2024-0359.html</id><updated>2024-07-25T12:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2024-0359.html" rel="alternate" type="text/html" title="RUSTSEC-2024-0359: Unsoundness in gix-attributes"/><published>2024-07-25T12:00:00+00:00</published><summary xml:lang="en">The kstring integration in gix-attributes is unsound</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/gix-attributes/RUSTSEC-2024-0359.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/gix-attributes/RUSTSEC-2024-0359.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2024-0359&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2024-0359
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;The kstring integration in gix-attributes is unsound&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-07-24&quot;&gt;
          July 24, 2024
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-07-25&quot;&gt;
          July 25, 2024
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/gix-attributes.html&quot;&gt;gix-attributes&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/gix-attributes&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unsound
        
      &lt;/dd&gt;

      

      

      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/Byron/gitoxide/issues/1460&quot;&gt;
              https://github.com/Byron/gitoxide/issues/1460
            &lt;/a&gt;
          &lt;/li&gt;
        
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.22.3&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;gix-attributes&lt;/code&gt; (in &lt;a href=&quot;https://github.com/Byron/gitoxide/blob/gix-attributes-v0.22.2/gix-attributes/src/state.rs#L19-L27&quot;&gt;&lt;code&gt;state::ValueRef&lt;/code&gt;&lt;/a&gt;) unsafely creates a &lt;code&gt;&amp;amp;str&lt;/code&gt; from a &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; containing non-UTF8 data, with the justification that so long as nothing reads the &lt;code&gt;&amp;amp;str&lt;/code&gt; and relies on it being UTF-8 in the &lt;code&gt;&amp;amp;str&lt;/code&gt;, there is no UB:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;// SAFETY: our API makes accessing that value as `str` impossible, so illformed UTF8 is never exposed as such.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem is that the non-UTF8 &lt;code&gt;str&lt;/code&gt; &lt;strong&gt;is&lt;/strong&gt; exposed to outside code: first to the &lt;code&gt;kstring&lt;/code&gt; crate itself, which requires UTF-8 in its documentation and may have UB as a consequence of this, but also to &lt;code&gt;serde&lt;/code&gt;, where it propagates to e.g. &lt;code&gt;serde_json&lt;/code&gt;, &lt;code&gt;serde_yaml&lt;/code&gt;, etc., where the same problems occur.&lt;/p&gt;
&lt;p&gt;This is not sound, and it could cause further UB down the line in these places that can view the &lt;code&gt;&amp;amp;str&lt;/code&gt;.&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2024-0358: Vulnerability in object_store</title><id>https://rustsec.org/advisories/RUSTSEC-2024-0358.html</id><updated>2024-07-23T12:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2024-0358.html" rel="alternate" type="text/html" title="RUSTSEC-2024-0358: Vulnerability in object_store"/><published>2024-07-23T12:00:00+00:00</published><summary xml:lang="en">Apache Arrow Rust Object Store: AWS WebIdentityToken exposure in log files</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/object_store/RUSTSEC-2024-0358.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/object_store/RUSTSEC-2024-0358.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2024-0358&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2024-0358
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Apache Arrow Rust Object Store: AWS WebIdentityToken exposure in log files&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-07-23&quot;&gt;
          July 23, 2024
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-07-23&quot;&gt;
          July 23, 2024
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/object_store.html&quot;&gt;object_store&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/object_store&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/information.html&quot;&gt;#information&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/leak.html&quot;&gt;#leak&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/aws.html&quot;&gt;#aws&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/oidc.html&quot;&gt;#oidc&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/logs.html&quot;&gt;#logs&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;aliases&quot;&gt;Aliases&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-41178&quot;&gt;CVE-2024-41178&lt;/a&gt;
            
          &lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/apache/arrow-rs/pull/6074&quot;&gt;
              https://github.com/apache/arrow-rs/pull/6074
            &lt;/a&gt;
          &lt;/li&gt;
        
        
          &lt;li&gt;
            &lt;a href=&quot;https://www.openwall.com/lists/oss-security/2024/07/23/3&quot;&gt;
              https://www.openwall.com/lists/oss-security/2024/07/23/3
            &lt;/a&gt;
          &lt;/li&gt;
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;cvss_score&quot;&gt;CVSS Score&lt;/dt&gt;
      &lt;dd&gt;3.8 &lt;span class=&quot;tag low&quot;&gt;
        LOW
      &lt;/span&gt;&lt;/dd&gt;

      &lt;dt id=&quot;cvss_details&quot;&gt;CVSS Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;dl&gt;
          
          &lt;dt&gt;Attack vector&lt;/dt&gt;&lt;dd&gt;Local&lt;/dd&gt;
          

          
          &lt;dt&gt;Attack complexity&lt;/dt&gt;&lt;dd&gt;Low&lt;/d&gt;
          

          
          &lt;dt&gt;Privileges required&lt;/dt&gt;&lt;dd&gt;Low&lt;/dd&gt;
          

          
          &lt;dt&gt;User interaction&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          

          
          &lt;dt&gt;Scope&lt;/dt&gt;&lt;dd&gt;Changed&lt;/dd&gt;
          

          
          &lt;dt&gt;Confidentiality&lt;/dt&gt;&lt;dd&gt;Low&lt;/dd&gt;
          

          
          &lt;dt&gt;Integrity&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          

          
          &lt;dt&gt;Availability&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          
        &lt;/dl&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;cvss&quot;&gt;CVSS Vector&lt;/dt&gt;
      &lt;dd&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:L/I:N/A:N&quot;&gt;CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:L/I:N/A:N&lt;/a&gt;&lt;/dd&gt;

      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.10.2&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;unaffected&quot;&gt;Unaffected&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;0.5.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;Exposure of temporary credentials in logs in Apache Arrow Rust Object Store,
version 0.10.1 and earlier on all platforms using AWS WebIdentityTokens.&lt;/p&gt;
&lt;p&gt;On certain error conditions, the logs may contain the OIDC token passed to
&lt;a href=&quot;https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html&quot;&gt;AssumeRoleWithWebIdentity&lt;/a&gt;.
This allows someone with access to the logs to impersonate that identity,
including performing their own calls to AssumeRoleWithWebIdentity, until the
OIDC token expires. Typically OIDC tokens are valid for up to an hour, although
this will vary depending on the issuer.&lt;/p&gt;
&lt;p&gt;Users are recommended to use a different AWS authentication mechanism, disable
logging or upgrade to version 0.10.2, which fixes this issue.&lt;/p&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;p&gt;When using AWS WebIdentityTokens with the &lt;code&gt;object_store&lt;/code&gt; crate, in the event of
a failure and automatic retry, the underlying &lt;code&gt;reqwest&lt;/code&gt; error, including the
full URL with the credentials, potentially in the parameters, is written to the
logs.&lt;/p&gt;
&lt;p&gt;Thanks to Paul Hatcherian for reporting this vulnerability&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2024-0357: Vulnerability in openssl</title><id>https://rustsec.org/advisories/RUSTSEC-2024-0357.html</id><updated>2024-07-21T12:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2024-0357.html" rel="alternate" type="text/html" title="RUSTSEC-2024-0357: Vulnerability in openssl"/><published>2024-07-21T12:00:00+00:00</published><summary xml:lang="en">`MemBio::get_buf` has undefined behavior with empty buffers</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/openssl/RUSTSEC-2024-0357.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/openssl/RUSTSEC-2024-0357.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2024-0357&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2024-0357
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;&lt;code&gt;MemBio::get_buf&lt;/code&gt; has undefined behavior with empty buffers&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-07-21&quot;&gt;
          July 21, 2024
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-07-21&quot;&gt;
          July 21, 2024
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/openssl.html&quot;&gt;openssl&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/openssl&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      

      

      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/sfackler/rust-openssl/pull/2266&quot;&gt;
              https://github.com/sfackler/rust-openssl/pull/2266
            &lt;/a&gt;
          &lt;/li&gt;
        
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.10.66&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      

      
      
    &lt;/dl&gt;

    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;openssl::bio::MemBio::get_buf&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;0.10.66, &amp;gt;=0.8.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    

    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;Previously, &lt;code&gt;MemBio::get_buf&lt;/code&gt; called &lt;code&gt;slice::from_raw_parts&lt;/code&gt; with a null-pointer, which violates the functions invariants, leading to undefined behavior. In debug builds this would produce an assertion failure. This is now fixed.&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry></feed>